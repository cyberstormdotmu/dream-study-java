package com.wy;

/**
 * 进制
 * 
 * 原码:第一位为符号位,0为整数,1为负数;反码:符号位不动,原码取反;补码:负数补码符符号位不动, 反码加1,正数补码为原码相同
 * 
 * @author ParadiseWY
 * @date 2019年3月25日 下午1:32:06
 */
public class S_Radix {

	/**
	 * 2进制的负数就是正数取反,之后加1,负数的最高位必然是1.如1是00000001,-1是11111110+1=11111111
	 * 2进制的运算,&(与),|(或),^(异或),~(反码),<<(左移),>>(右移),>>>(无符号右移)
	 * &:一假为假;|:一真为真;;~:反码是数字的取反,不过不加1
	 * ^:当2进制bit位上相同时为假,不同为真;当一个数被另外一个数异或2次得到的结果仍然是原来的数,用于加密
	 * 如:6&3=2,6|3=7,6^3=5,5^3=6,~6=-7
	 * <<:左移就是左移的数字乘以2的位数次幂,如3<<2=3*2的平方=12 >>:右移的最高位,原来是什么就用什么补位,如6>>2=
	 * 1,和左移相同,只不过是除以,抹除小数 >>>:无符号右移和右移的区别在于最高位的补位都是0,不会补1
	 */
}