package com.wy.algorithms;

/**
 * @description 算法{@link https://www.cs.usfca.edu/~galles/visualization/Algorithms.html}
 * @author paradiseWy 2019年3月27日 下午8:43:55
 * @git {@link https://github.com/mygodness100}
 */
public class Algorithms {

	/**
	 * 二叉树:每个节点最多有2个子树的树结构,用于实现二叉树查找.但可能会遇到单边树,即1>2>3,
	 * 若是按照下级比上级大的数排左边,那么会出现只有一边树的结构,和遍历所有数据是一样的效果 若是非数字,可根据该字符在ascii表里的位置进行比较
	 */

	/**
	 * 红黑树:变相的二叉树,即当出现二叉树的单边情况时,会自动将单边变为二叉树,但只会在当前单边增加.
	 * 如果连续3个出现单边,那么中间一个会作为一个树父节点,另外2个会变成叶子节点
	 */

	/**
	 * hash算法:根据特定的算法对需要存储的值进行hash计算,可直接定位指针,但是无法进行排序,因为hash值非数字
	 */

	/**
	 * BTree:类似于二叉树,但是他在每个节点里存储的个数并非是一个,这需要根据btree设置的度来控制
	 * 度即每个节点可以存储的数据.当该节点的数据超出这个度时,数据向上延展,且每个节点可拥有的子节点可能多于2个
	 * 该结构每个节点都会存储数据,致使每一层的key减少,而cpu一次从内存总读取的数据是有限的,存储的数据越多,
	 * 每个节点存的key就越少,故出现了B+Tree
	 */

	/**
	 * B+Tree:在BTree的基础上改进,非叶子节点不存储数据,即父节点有子节点,则数据将转移到叶子节点上,
	 * 而叶子节点将会冗余父节点,即叶子节点会出现一个相同的父节点,该冗余的节点携带数据
	 */

	/**
	 * 限流的令牌桶算法:gvaua中有RateLimiter,已经实现好的令牌桶算法.系统会以一个恒定的速度往桶里面放入令牌
	 * 当有请求需要被处理时,需要先从桶里面拿令牌, 如果令牌已经没有了,请求就会被拒绝
	 */
}