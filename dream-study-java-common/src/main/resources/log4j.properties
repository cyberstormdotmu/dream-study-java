# 指定日志输出级别以及那些日志类型使用该级别
log4j.rootLogger=INFO,console
# 指定控制台输出
log4j.appender.console=org.apache.log4j.ConsoleAppender
# 指定日志记录到文件
#log4j.appender.console=org.apache.log4j.FileAppender
# 每天产生一个日志文件
#log4j.appender.console=org.apache.log4j.DailyRollingFileAppender
# 文件大小到指定大小时产生一个新的文件
#log4j.appender.console=org.apache.log4j.RollingFileAppender
# 将日志信息以流的形式发送到其他地方
#log4j.appender.console=org.apache.log4j.WriterAppender

#ConsoleAppender选项属性 
# -Threshold = DEBUG:指定日志消息的输出最低层次 
# -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出 
# -Target = System.err:默认值System.out,输出到控制台(err为红色,out为黑色) 
# 
#FileAppender选项属性 
# -Threshold = INFO:指定日志消息的输出最低层次 
# -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出 
# -File = C:\log4j.log:指定消息输出到C:\log4j.log文件 
# -Append = FALSE:默认值true,将消息追加到指定文件中,false指将消息覆盖指定的文件内容 
# -Encoding = UTF-8:可以指定文件编码格式 
# 
#DailyRollingFileAppender选项属性 
# -Threshold = WARN:指定日志消息的输出最低层次 
# -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出 
# -File = C:\log4j.log:指定消息输出到C:\log4j.log文件 
# -Append = FALSE:默认值true,将消息追加到指定文件中,false指将消息覆盖指定的文件内容 
# -DatePattern='.'yyyy-ww:每周滚动一次文件,即每周产生一个新的文件。还可以按用以下参数: 
#              '.'yyyy-MM:每月 
#              '.'yyyy-ww:每周 
#              '.'yyyy-MM-dd:每天 
#              '.'yyyy-MM-dd-a:每天两次 
#              '.'yyyy-MM-dd-HH:每小时 
#              '.'yyyy-MM-dd-HH-mm:每分钟 
# -Encoding = UTF-8:可以指定文件编码格式 
# 
#RollingFileAppender选项属性 
# -Threshold = ERROR:指定日志消息的输出最低层次 
# -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出 
# -File = C:/log4j.log:指定消息输出到C:/log4j.log文件 
# -Append = FALSE:默认值true,将消息追加到指定文件中,false指将消息覆盖指定的文件内容 
# -MaxFileSize = 100KB:后缀可以是KB,MB,GB.在日志文件到达该大小时,将会自动滚动.如:log4j.log.1 
# -MaxBackupIndex = 2:指定可以产生的滚动文件的最大数 
# -Encoding = UTF-8:可以指定文件编码格式 

log4j.appender.console.Target=System.out

# 定义输出那种格式的日志,当前为自定义格式
log4j.appender.console.layout=org.apache.log4j.PatternLayout
# html格式
#log4j.appender.console.layout=org.apache.log4j.HTMLLayout
# 日志信息级别及信息
#log4j.appender.console.layout=org.apache.log4j.SimpleLayout
# 日志的时间,线程.类别
#log4j.appender.console.layout=org.apache.log4j.TTCCLayout
# 以XML形式布局)
#log4j.appender.console.layout=org.apache.log4j.xml.XMLLayout

#HTMLLayout选项属性 
# -LocationInfo = TRUE:默认值false,输出Java文件名称和行号 
# -Title=Struts Log Message:默认值 Log4J Log Messages 
# 
#PatternLayout选项属性 
# -ConversionPattern = %m%n:格式化指定的消息(参数意思下面有) 
# 
#XMLLayout选项属性 
# -LocationInfo = TRUE:默认值false,输出java文件名称和行号 

# 自定义日志输出格式
# %m:输出代码中指定的消息
# %p:输出优先级,即DEBUG,INFO,WARN,ERROR,FATAL
# %r:输出自应用启动到输出该log信息耗费的毫秒数
# %c:输出所属的类目,通常就是所在类的全名
# %t:输出产生该日志事件的线程名
# %n:输出一个回车换行符,Windows平台为“rn”,Unix平台为“n”
# %d:输出日志时间点的日期或时间,默认格式为ISO8601,也可以在其后指定格式,比如%d{yyyy MMM dd HH:mm:ss,SSS}
# %l:输出日志事件的发生位置,包括类目名,发生的线程,以及在代码中的行数
# %F 输出日志消息产生时所在的文件名称 
# %L 输出代码中的行号 
# %x 输出和当前线程相关联的NDC(嵌套诊断环境),像java servlets多客户多线程的应用中 
# %% 输出一个"%"字符 
# 可以在%与模式字符之间加上修饰符来控制其最小宽度,最大宽度,和文本的对齐方式.如: 
#  %5c: 输出category名称,最小宽度是5,category<5,默认的情况下右对齐 
#  %-5c:输出category名称,最小宽度是5,category<5,"-"号指定左对齐,会有空格 
#  %.5c:输出category名称,最大宽度是5,category>5,就会将左边多出的字符截掉,<5不会有空格 
#  %20.30c:category名称<20补空格,并且右对齐,>30字符,就从左边交远销出的字符截掉 
# [QC]:是log信息的开头,可以为任意字符,一般为项目简称
log4j.appender.console.layout.ConversionPattern=%d %p [%C:%L] - %m%n

# 配置输出sql语句
log4j.logger.com.ibatis=DEBUG
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG
log4j.logger.com.pro.mapper = DEBUG
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG

# 指定特定包的输出特定的级别 
#log4j.logger.org.springframework=DEBUG 

## 配置错误日志发送邮箱
#log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender
## 发送级别
#log4j.appender.MAIL.Threshold=ERROR
## 日志达到10k时才发送email
#log4j.appender.MAIL.BufferSize=10
## 发送到邮箱,若多人可用逗号隔开
#log4j.appender.MAIL.From=582822832@qq.com
## SMTP邮件发送服务器地址
#log4j.appender.MAIL.SMTPHost=smtp.qq.com
## SMTP发送认证帐号的密码
#log4j.appender.MAIL.SMTPPassword=123456
## 是否打印调试信息,如果选true,则会输出和SMTP之间的握手等详细信息
#log4j.appender.MAIL.SMTPDebug=true
## 邮件主题
#log4j.appender.MAIL.Subject=Log4JErrorMessage
##如果需要发副本给某人,则加入下列行
#log4j.appender.logMail.Cc = xxx@xxx.xxx
## log4j.appender.MAIL.Bcc=xxx@xxx.xxx  
#log4j.appender.MAIL.To=1234@12345.com
#log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout
#log4j.appender.MAIL.layout.ConversionPattern=[wy]%d - %c -%-4r[%t]%-5p %c %x -%m%n
#log4j.appender.MAIL.layout.LocationInfo = TRUE 
#log4j.appender.MAIL.layout.Title = Struts2 Mail LogFile

#将日志登录到MySQL数据库 
#log4j.appender.logDB = org.apache.log4j.jdbc.JDBCAppender 
#log4j.appender.logDB.layout = org.apache.log4j.PatternLayout 
#log4j.appender.logDB.Driver = com.mysql.jdbc.Driver 
#log4j.appender.logDB.URL = jdbc:mysql://127.0.0.1:3306/xly 
#log4j.appender.logDB.User = root 
#log4j.appender.logDB.Password = 123456 
#log4j.appender.logDB.Sql = INSERT INTOT_log4j(project_name,create_date,level,category,file_name,thread_name,line,all_category,message)values('Struts2','%d{yyyy-MM-ddHH:mm:ss}','%p','%c','%F','%t','%L','%l','%m')

#----------------------------------------------------------------------default
#log4j.appender.file=org.apache.log4j.RollingFileAppender
#log4j.appender.file.File=${project}logs/default.log
# 设置文件的最大大小
#log4j.appender.file.MaxFileSize=100M
# 设置文件最多备份多少个
#log4j.appender.file.MaxBackupIndex=100
#log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout
#log4j.appender.daily.layout.ConversionPattern=%d %p [%C:%L] - %m%n

#----------------------------------------------------------------------default
#log4j.appender.daily=org.apache.log4j.DailyRollingFileAppender
# 指定将生成的日志文件所放的目录
#log4j.appender.daily.file=logs/default.log
#log4j.appender.daily.DatePattern='.'yyyy-MM-dd
#log4j.appender.daily.layout=org.apache.log4j.PatternLayout
#log4j.appender.daily.layout.ConversionPattern=%d %p [%C:%L] - %m%n
#------------------------------------------------------------------------test
#log4j.logger.com. neusoft =DEBUG
# 指定com.neusoft包下的所有类的等级为DEBUG

#log4j.appender.dao=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.dao.file=logs/dao.log
#log4j.appender.dao.DatePattern='.'yyyy-MM-dd.HH
#log4j.appender.dao.layout=org.apache.log4j.PatternLayout
#log4j.appender.dao.layout.ConversionPattern=%d %p [%C:%L] - %m%n
#----------------------------------------------------------------------------------------------http request to other server
#log4j.logger.com.jav.http=INFO,http
#log4j.additivity.com.cmn.jav.http=false
#log4j.appender.http=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.http.file=logs/http.log
#log4j.appender.http.DatePattern='.'yyyy-MM-dd
#log4j.appender.http.layout=org.apache.log4j.PatternLayout
#log4j.appender.http.layout.ConversionPattern=%d %p [%C:%L] - %m%n
#----------------------------------------------------------------------------------------------http request from client
#log4j.logger.com.carapp.action=INFO,action
#log4j.additivity.com.huoli.carapp.action=false
#log4j.appender.action=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.action.file=logs/action.log
#log4j.appender.action.DatePattern='.'yyyy-MM-dd.HH
#log4j.appender.action.layout=org.apache.log4j.PatternLayout
#log4j.appender.action.layout.ConversionPattern=%d %p [%C:%L] - %m%n