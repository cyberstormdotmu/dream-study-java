#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

	# 日志格式,可以有多个
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

	# 是否开启日志:on/off
	#access_log on;
	# 日志地址以及记录日志的格式
    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    
    #gzip  on;
    
    # 侦听端口
    server {
		# http协议端口
		#listen 80;
		# https协议端口
		#listen 443 ssl;
		# https2协议端口
		#listen 443 ssl http2;
		# IPv6端口
		#listen [::]:80;
		# 只监听IPv6端口
		#listen [::]:80 ipv6only=on;
		# 监听域名
		#server_name yourdomain.com;
		# 监听多域名
		#server_name *.yourdomain.com;
		# 监听所有顶级域名
		#server_name yourdomain.*;
		# Listen to unspecified Hostnames (Listens to IP address itself)
		#server_name "";
		# 重定向
		#return 301 http://yourdomain.com$request_uri;
		# 重定向,同上
		#location /redirect-url {
		#	return 301 http://otherdomain.com;
		#}
		# 反向代理
		#location / {
		#	proxy_pass http://0.0.0.0:3000;
		#}
		# 负载均衡
		#location / {
		#	proxy_pass http://mall;
		#}
	}
	
	# SSL协议
	server {
		listen 443 ssl;
		server_name yourdomain.com;
		ssl on;
		ssl_certificate /path/to/cert.pem;
		ssl_certificate_key /path/to/privatekey.pem;
		ssl_stapling on;
		ssl_stapling_verify on;
		ssl_trusted_certificate /path/to/fullchain.pem;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_session_timeout 1h;
		ssl_session_cache shared:SSL:50m;
		add_header Strict-Transport-Security max-age=15768000;
	}
	# 永久重定向
	server {
		listen 80;
		server_name yourdomain.com;
		return 301 https://$host$request_uri;
	}
    
    # mall是需要在使用负载均衡的server属性中增加的,如proxy_pass http://mall;写在location中
    upstream mall{
    	server 127.0.0.1:8080;
    	# down:当前的server不参与负载均衡
    	# server 127.0.0.1:8080 down;
    	# weight:权重,默认为1,weight越大,负载的权重就越大,该服务被访问的几率就越大
    	# server 127.0.0.1:8080 weight=2;
    	# max_fails:允许请求失败的次数默认为1.当超过最大次数时,返回proxy_next_upstream模块定义的错误
    	# fail_timeout:max_fails次失败后,暂停的时间
    	# server 127.0.0.1:8080 max_fails=2 fail_timeout=30s;
    	# backup:其它所有的非backup机器down或者忙的时候,请求的backup机器,所以这台机器压力会最轻
    }
	
	includes /app/nginx/conf/*.conf
}