#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    # 开启静态文件压缩功能.放到全局配置或某个server中也行
    gzip on;
    gzip_buffers 32 4K;
    gzip_comp_level 6;
    gzip_min_length 100;
    gzip_types application/javascript text/css text/xml;
    # 配置禁用gzip条件,支持正则.此处表示ie6及以下不启用gzip,因为ie低版本不支持
    gzip_disable "MSIE [1-6]\.";
    gzip_vary on;
    
    # api是需要在使用负载均衡的server属性中增加的,如proxy_pass http://api;写在location中
    upstream api{
    	server 127.0.0.1:8080;
        server 127.0.0.1:8081;
    	# down:当前的server不参与负载均衡
    	# server 127.0.0.1:8080 down;
    	# weight:权重,默认为1,weight越大,负载的权重就越大,该服务被访问的几率就越大
    	# server 127.0.0.1:8080 weight=2;
    	# max_fails:允许请求失败的次数默认为1.当超过最大次数时,返回proxy_next_upstream模块定义的错误
    	# fail_timeout:max_fails次失败后,暂停的时间
    	# server 127.0.0.1:8080 max_fails=2 fail_timeout=30s;
    	# backup:其它所有的非backup机器down或者忙的时候,请求的backup机器,所以这台机器压力会最轻
    }

    upstream static{
        server 127.0.0.1:8082;
        server 127.0.0.1:8083;
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            # 设置根目录地址,结尾可带/也不可不带;如果是alias,结尾必须带/
            root   html;
        }

        # 主API负载均衡
        location /api{
            proxy_pass http://api/;
        }

        # 静态资源负载均衡
        location ~.*\.(jpg|png|jpeg|js|css|html|vue|mp3|mp4|avi|rmvb|txt)$ {
            proxy_pass http://static/;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
	
	# 扫描指定目录下的所有后缀为conf的nginx配置文件并加载到当前配置中,被扫描的文件中可以只有server
	# includes /app/nginx/conf/*.conf
}